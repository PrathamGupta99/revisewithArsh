vector<int> isSubset(int arr[], int n, int sum)
{
    vector<int> v;
    bool dp[n+1][sum+1];
    for(int i=0;i<=n;i++)
		dp[i][0] = true;
	for(int j=1;j<=sum;j++)
		dp[0][j] = false;
		
    // Choice diagram CODE 
    for(int i=1;i<n+1;i++)
    {
        for(int j=1;j<sum+1;j++)
        {
            if(j<arr[i-1])
                dp[i][j] = dp[i-1][j];
            else
                dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
        }
    }
    
    for(int i=0;i<=sum/2;i++)
    {
        v.push_back(dp[n][i]);
    }
    return v;
}

int sum_array(int arr[], int n)
{
    int sum = 0;
    for(int i=0;i<n;i++)
    {
        sum+=arr[i];
    }
    return sum;
}
class Solution{

	public:
	int minDiffernce(int arr[], int n) 
	{ 
	    int s = sum_array(arr,n);
	    vector<int> v;
	    v = isSubset(arr,n,s);
	    int mini = INT_MAX;
	    for(int i=0;i<v.size();i++)
	    {
	        if(v[i]==1)
	            mini = min(mini,(s-2*i));
	    }
	    return mini;
	} 
};