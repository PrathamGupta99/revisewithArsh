class Solution
{
    public:
    bool issafe(vector<vector<int>> vis, vector<vector<int>> grid,
            int i, int j, int n, int m)
        return i>=0 && i<n && j>=0 && j<m && !vis[i][j] && grid[i][j];
    void dfs(vector<vector<int>> &vis, vector<vector<int>> grid, 
            int i, int j, int &count, int n, int m)
    {
        int rown[] = {1 ,-1,-1,-1, 1, 1, 0, 0};
        int coln[] = {0 , 1, 0,-1, 1,-1, 1,-1};
        vis[i][j] = 1;
        
        for(int k=0;k<8;k++)
        {
            if(issafe(vis, grid, i+rown[k], j+coln[k], n, m))
            {
                count++;
                dfs(vis, grid, i+rown[k], j+coln[k], count, n ,m);
            }
        }
    }
    int findMaxArea(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int> (m,0));
        int ans = INT_MIN;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid[i][j])
                {
                    int count = 1;
                    dfs(vis, grid, i, j, count, n, m) ;
                    ans = max(ans, count);
                }
            }
        }
        return ans;
    }
};